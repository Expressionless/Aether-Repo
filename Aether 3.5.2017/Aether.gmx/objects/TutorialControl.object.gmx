<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the Tutorial Messages
showHints = true;
enableHide = false;
neverShowHints = false;
Hints();

//Set the current hint title and message
currentHint = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize The 'Hint' buttons
buttonCount = 4;
originX[0] = 32;
originY[0] = 64;
originX[1] = 320;
originY[1] = 500;
for (i = 0; i &lt; buttonCount; i++) {
    buttonWidth[i] = 100;
    buttonHeight[i] = font_get_size(fnt_hud)+6;
    button[i, 0] = "";
    button[i, 1] = originX[0]+20+i*146;
    button[i, 2] = originY[1] - buttonHeight[i]*1.5;
    overButton[i] = false;
}
button[0, 0] = "Prev";
button[1, 0] = "Next";

//The Close Button
button[2, 0] = "Close";
buttonWidth[2] = 32;
buttonHeight[2] = buttonWidth[2];
button[2, 1] = originX[0]+buttonWidth[2]*0.25;
button[2, 2] = originY[0] + buttonHeight[2]*0.25;

//The Hide Tutorial Button
button[3, 0] = "Hide";
buttonWidth[3] = 24;
buttonHeight[3] = buttonWidth[3];
button[3, 1] = originX[0]+buttonWidth[3]*0.25;
button[3, 2] = originY[1]-buttonHeight[3]*3.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Button States
if(!PAUSED) {
    for(i = 0; i &lt; array_height_2d(button); i++) {
        var xx = abs(view_xview[0]+button[i, 1] + buttonWidth[i]/2 - mouse_x);
        var yy = abs(view_yview[0]+button[i, 2] + buttonHeight[i]/2 - mouse_y);
        overButton[i] = (xx &lt; buttonWidth[i]/2) &amp;&amp; (yy &lt; buttonHeight[i]/2);
    }
    
    currentHint = clamp(currentHint, 0, array_height_2d(tutorial));
    if(!neverShowHints) {
        for(i = 0; i &lt; array_height_2d(button); i++) {
            if(mouse_check_button_pressed(mb_left)) {
                if(overButton[i]) {
                    switch(button[i, 0]) {
                        case "Prev":
                            if(showHints) {
                                if(currentHint&gt;0) currentHint--;
                                else currentHint = array_height_2d(tutorial)-1;
                            }
                        break;
                        
                        case "Next":
                            if(showHints) {
                                if(currentHint&lt;array_height_2d(tutorial)-1) currentHint++;
                                else currentHint = 0;
                            }
                        break;
                        
                        case "Close":
                            if(!showHints) showHints = true
                                else if(showHints &amp;&amp; !enableHide) showHints = false
                                else if(showHints &amp;&amp; enableHide) 
                                {
                                    showHints = false;
                                    neverShowHints = true;
                                }
                        break;
                        
                        case "Hide":
                            if(!enableHide) enableHide = true
                                else enableHide = false;
                        break;
                        
                        default:
                        
                        break;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positions
x1 = view_xview[0]+originX[0];
y1 = view_yview[0]+originY[0];
x2 = view_xview[0]+originX[1];
y2 = view_yview[0]+originY[1];
depth = room_height*-1+1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Backdrop, Hints and Buttons
if(!neverShowHints) {
    if(showHints) {
        //Draw Backdrop
        draw_set_alpha(.75);
        draw_set_color(c_black);
        draw_rectangle(x1,y1,x2,y2,0);
        draw_set_alpha(1);
        
        //Draw Hints and Hint Title
        draw_set_halign(fa_left);
        draw_set_color(c_white);
        draw_text_transformed(x1+12+buttonWidth[2]*1.3,y1+12,tutorial[currentHint,  0],1.125,1.125,image_angle);
        draw_text(x1+12,y1+12+buttonHeight[2]*1.125,"#"+tutorial[currentHint, 1]);
    
        //Draw the 3 respective buttons with a 2 colored bordered, and overButton visual change.
        for(i = 0; i &lt; array_height_2d(button); i++) {
            var xx = view_xview[0]+button[i, 1];
            var yy = view_yview[0]+button[i, 2];
            if(button[i, 0] != "Close" &amp;&amp; button[i, 0] != "Hide") {
                draw_set_color(c_dkgray);
                draw_set_alpha(overButton[i]*0.5);
                draw_rectangle(xx, yy, xx+buttonWidth[i],yy+buttonHeight[i], 0);
                draw_set_alpha(1);
                draw_set_color(c_dkgray);
                draw_rectangle(xx, yy, xx+buttonWidth[i], yy+buttonHeight[i], 1);
                draw_set_color(c_gray);
                draw_rectangle(xx+1, yy-1, xx+buttonWidth[i]-1, yy+buttonHeight[i]-1, 1);
                draw_set_halign(fa_center);
                draw_set_color(c_white);
                draw_text(xx+buttonWidth[i]/2, yy+buttonHeight[i]/8, button[i, 0]);
            }
        }
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_text(x1+(x2-x1)/2,y2 - 32, string(currentHint+1)+"/"+string(array_height_2d(tutorial)));
    }
    
    //Draw Close/Open Button
    var xx = view_xview[0]+button[2, 1];
    var yy = view_yview[0]+button[2, 2];
    if(!showHints)
    {
        draw_set_alpha(.75);
        draw_set_color(c_black);
        draw_rectangle(xx-buttonWidth[2]*.25,yy-buttonWidth[2]*.25,xx+buttonWidth[2]*1.25,yy+buttonWidth[2]*1.25,0);
        draw_set_alpha(1);
    }
    //Draw OverButton for Close/Open
    draw_set_color(c_red);
    draw_set_alpha(overButton[2]*0.5);
    draw_rectangle(xx, yy, xx+buttonWidth[2],yy+buttonHeight[2], 0);
    draw_set_alpha(1);
    draw_set_color(c_dkgray);
    draw_rectangle(xx, yy, xx+buttonWidth[2], yy+buttonHeight[2], 1);
    draw_rectangle(xx+1, yy-1, xx+buttonWidth[2]-1, yy+buttonHeight[2]-1, 1);
    //Draw Close/Open Button
    var xx = view_xview[0]+button[2, 1];
    var yy = view_yview[0]+button[2, 2];
    
    if(showHints)
    {
        draw_set_alpha(.75);
        draw_set_color(c_black);
        draw_set_alpha(1);
        //Draw OverButton for Hide/Show Tutorials Permanent
        draw_set_color(c_red);
        draw_set_alpha(overButton[3]*0.5);
        draw_rectangle(view_xview[0]+button[3,1], view_yview[0]+button[3,2], view_xview[0]+button[3,1]+buttonWidth[3],view_yview[0]+button[3,2]+buttonHeight[3], 0);
        draw_set_alpha(1);
        draw_sprite(checkBox, enableHide, view_xview[0]+button[3,1]+buttonWidth[3]/2,view_yview[0]+button[3,2]+buttonHeight[3]/2);
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        draw_set_font(fnt_tut);
        draw_set_alpha(1);
        var msg = "Never Show Tutorials (Change in Options)";
        var xscale = (x2-x1-30)/string_width(msg);
        var yscale = 1;
        draw_text_transformed(view_xview[0]+button[3, 1]+buttonWidth[3]*1.25, view_yview[0]+button[3, 2], msg, xscale, yscale, image_angle);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
