<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining and Initializing Menu Buttons
buttonWidth = 225;
buttonHeight = 72;
for(i = 0; i &lt; 3; i++) {
    button[0, i] = "";
    buttonX[0, i] = x;
    buttonY[0, i] = y+96*i;
    overButton[0, i] = false;
}
//Local Enumerator??
play = 0;
options = 1;
quit = 2;
//Captioning Buttons
button[0, play] = "Play";
button[0, options] = "Options";
button[0, quit] = "Quit";

//Variables for Drawing
textScale = .33;

/*
* draw_set_font(fnt_menu);
* drawButton(x,y+96,225,72,"Play", 1, scale, scale);
* drawButton(x,y+192,225,72,"Options",1,scale,scale);
* drawButton(x,y+288,225,72,"Quit",1,scale,scale);
* draw_text(view_wview[0]/2,40,"Aether");
*/
defunct = false;
currentMenu = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining and Initializing Options Buttons
for(i = 0; i &lt; 4; i++) {
    button[1, i] = "";
    buttonX[1, i] = x;
    buttonY[1, i] = y-(3*96)+96*i;
    overButton[1, i] = false;
}
//Captioning Buttons
button[1, 0] = "Fullscreen";
button[1, 1] = "Keybinds";
button[1, 2] = "Null";
buttonX[1, 3] = x;
buttonY[1, 3] = room_height-buttonHeight;
button[1, 3] = "Back";

//Variables for Drawing
textScale = .33;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining and Initializing FullScreen Buttons
for(i = 0; i &lt; 2; i++) {
    button[2, i] = "";
    buttonX[2, i] = x+buttonWidth/3;
    buttonY[2, i] = y-(3*96)+96*i+buttonHeight;
    overButton[2, i] = false;
}
button[2, 0] = "Fullscreen";
button[2, 1] = "Windowed";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TICK
defunct = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Over Button and Button Events

//Set Button Count
buttonCount = array_height_2d(button);

//Check for Each Button, whether or not the mouse is over the button
for(i = 0; i &lt; array_height_2d(button); i++) {
    for(j = 0; j &lt; array_length_2d(button, i); j++) {
        var xx = abs(buttonX[i, j]+buttonWidth/2 - mouse_x);
        var yy = abs(buttonY[i, j]+buttonHeight/2 - mouse_y);
        overButton[i, j] = (xx &lt; buttonWidth/2) &amp;&amp; (yy &lt; buttonHeight/2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Button Events

//Check Whether the Mouse is over a button
for(i = 0; i &lt; array_height_2d(button); i++) {
    for(j = 0; j &lt; array_length_2d(button, currentMenu); j++) {
        if(overButton[currentMenu, j]) {
            //If so check for a Mouse Left Click
            if(mouse_check_button_released(mb_left)) {
                
                //Check Which Button was clicked
                switch(currentMenu) {
                    case 0:
                        switch(button[0, j]) {
                            case "Play":
                                room_goto(room0);
                            break;
                            
                            case "Options":
                                currentMenu = 1;
                            break;
                            
                            case "Quit":
                                game_end();
                            break;
                        }
                    break;
                    
                    case 1:
                        switch(button[1, j]) {
                            case "Fullscreen":
                                currentMenu = 2;
                            break;
                            
                            case "Keybinds":
                                defunct = true;
                                alarm[0] = 1.25*room_speed;
                            break;
                            
                            case "Null":
                                defunct = true;
                                alarm[0] = 1.25*room_speed;
                            break;
                            
                            case "Back":
                                currentMenu = 0;
                            break;
                        }
                    break;
                    
                    case 2:
                        switch(button[2, j]) {
                            case "Fullscreen":
                                window_set_fullscreen(true);
                                currentMenu = 1;
                            break;
                            
                            case "Windowed":
                                window_set_fullscreen(false);
                                currentMenu = 1;
                            break;
                        }
                    break;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Config Settings
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Buttons
/* REFERNCE
* draw_set_font(fnt_menu);
* drawButton(x,y+96,225,72,"Play", 1, scale, scale);
*/
draw_set_font(fnt_menu);
for(i = 0; i &lt; array_length_2d(button, currentMenu); i++) {
draw_set_alpha(.5+.5*overButton[currentMenu, i]);
    drawButton(buttonX[currentMenu, i], buttonY[currentMenu, i] //Set X and Y Coordinate for drawing the specified Button
    , buttonWidth, buttonHeight, button[currentMenu, i], 1 //Set Width Height, and True for scalable text
    , textScale, textScale); //Set the scale for the text
}
draw_text(view_wview[0]/2,40,"Aether");
if(defunct) { //Display for 2.5 Seconds
    var alpha = alarm[0]/(1*room_speed);
    //if(alarm[0] &lt;= 1.5*room_speed) {
    draw_set_alpha(alpha);
    draw_text_transformed(view_wview[0]/2,view_hview[0]/2,"Button Currently#Defunct",0.75,0.75,image_angle);
    draw_set_alpha(1);
    //}
}
draw_text(500,500,FULLSCREEN);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
