<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining and Initializing Menu Buttons
buttonWidth = 225;
buttonHeight = 72;
for(i = 0; i &lt; 3; i++) {
    button[0, i] = "";
    buttonX[0, i] = x;
    buttonY[0, i] = y+394+96*i;
    overButton[0, i] = false;
}
//Local Enumerator??
play = 0;
options = 1;
quit = 2;
//Captioning Buttons
button[menu.main, play] = "Resume";
button[menu.main, options] = "Options";
button[menu.main, quit] = "Quit";

//Variables for Drawing
textScale = .33;

/*
* draw_set_font(fnt_menu);
* drawButton(x,y+96,225,72,"Play", 1, scale, scale);
* drawButton(x,y+192,225,72,"Options",1,scale,scale);
* drawButton(x,y+288,225,72,"Quit",1,scale,scale);
* draw_text(view_wview[0]/2,40,"Aether");
*/
defunct = false;
currentMenu = menu.main;
depth = room_height * -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining and Initializing Options Buttons
buttonWidth = 225;
buttonHeight = 72;
for(i = 0; i &lt; 1; i++) {
    button[1, i] = "";
    buttonX[1, i] = x;
    buttonY[1, i] = y+394+96*i;
    overButton[1, i] = false;
}
//Local Enumerator??

//Captioning Buttons
button[1, 0] = "Back";
buttonX[1, 0] = view_wview[0]-buttonWidth;
buttonY[1, 0] = view_hview[0]-buttonHeight*1.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Over Button

//Set Button Count
buttonCount = array_height_2d(button);

//Check for Each Button, whether or not the mouse is over the button
for(i = 0; i &lt; array_height_2d(button); i++) {
    for(j = 0; j &lt; array_length_2d(button, i); j++) {
        var xx = abs(view_xview[0]+buttonX[i, j]+buttonWidth/2 - mouse_x);
        var yy = abs(view_yview[0]+buttonY[i, j]+buttonHeight/2 - mouse_y);
        overButton[i, j] = (xx &lt; buttonWidth/2) &amp;&amp; (yy &lt; buttonHeight/2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Buttons

for(i = 0; i &lt; array_height_2d(button); i++) {
    for(j = 0; j &lt; array_length_2d(button, currentMenu); j++) {
        if(overButton[currentMenu, j]) {
            //If so check for a Mouse Left Click
            if(mouse_check_button_released(mb_left)) {
                
                //Check Which Button was clicked
                switch(currentMenu) {
                    case menu.main:
                        switch(button[0, j]) {
                            case "Resume":
                                PAUSED = false;
                            break;
                            
                            case "Options":
                                currentMenu = menu.options;
                            break;
                            
                            case "Quit":
                                room_goto(rm_menu);
                            break;
                        }
                    break;
                    
                    case menu.options:
                        switch(button[1, j]) {
                            case "Back":
                                currentMenu = menu.main;
                            break;
                        }
                    break;
                }
            }
        }
    }
}
/*
button[0, 0] = "Resume";
button[1, 0] = "Options";
button[2, 0] = "Quit";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check State Keys
if(keyboard_check_pressed(global.key[key.paused])) {
    if(!PAUSED) 
    {
        PAUSED = true;
        currentMenu = menu.main;
    }
    else 
    {
        PAUSED = false;
        currentMenu = menu.main;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Pause Menu
if(PAUSED) 
{
    
    //Draw Paused Text
    draw_set_halign(fa_center);
    draw_set_font(fnt_menu);
    draw_text_outline(view_xview[0]+view_wview[0]/2, 
                      view_yview[0]+view_hview[0]/2,"PAUSED",0.25,0.25,image_angle,3,c_white,c_black);
    draw_set_font(fnt_hud);
    
    //Draw Backdrop
    draw_set_alpha(.5);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,0);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Buttons
if(PAUSED) {
    draw_set_font(fnt_menu);
    for(i = 0; i &lt; array_length_2d(button, currentMenu); i++) {
    draw_set_alpha(.5+.125*overButton[currentMenu, i]);
        drawButton(view_xview[0]+buttonX[currentMenu, i], view_yview[0]+buttonY[currentMenu, i] //Set X and Y Coordinate for drawing the specified Button
        , buttonWidth, buttonHeight, button[currentMenu, i], 1 //Set Width Height, and True for scalable text
        , textScale, textScale); //Set the scale for the text
    }
    if(defunct) { //Display for 2.5 Seconds
        var alpha = alarm[0]/(1*room_speed);
        //if(alarm[0] &lt;= 1.5*room_speed) {
        draw_set_alpha(alpha);
        draw_text_transformed(view_wview[0]/2,view_hview[0]/2,"Button Currently#Defunct",0.75,0.75,image_angle);
        draw_set_alpha(1);
        //}
    }
    draw_set_font(fnt_hud);
}
draw_text(300,400,currentMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
